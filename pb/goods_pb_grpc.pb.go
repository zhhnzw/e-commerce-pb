// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: goods_pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsServiceClient is the client API for GoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServiceClient interface {
	GetGoodsList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error)
	GetGoodsDetail(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReplyItem, error)
	GetGoodsHotList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error)
	GetGoodsStatistic(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsStatisticReply, error)
	MakeStockUp(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error)
	MakeStockDown(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error)
	GetProductList(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListReply, error)
	GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductDetailReply, error)
	GetSpecificationDetail(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationDetailReply, error)
	AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error)
	GetAdList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdReply, error)
}

type goodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServiceClient(cc grpc.ClientConnInterface) GoodsServiceClient {
	return &goodsServiceClient{cc}
}

func (c *goodsServiceClient) GetGoodsList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error) {
	out := new(GoodsReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetGoodsDetail(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReplyItem, error) {
	out := new(GoodsReplyItem)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetGoodsHotList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error) {
	out := new(GoodsReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetGoodsHotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetGoodsStatistic(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsStatisticReply, error) {
	out := new(GoodsStatisticReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetGoodsStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) MakeStockUp(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/MakeStockUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) MakeStockDown(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/MakeStockDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetProductList(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListReply, error) {
	out := new(ProductListReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductDetailReply, error) {
	out := new(ProductDetailReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetSpecificationDetail(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationDetailReply, error) {
	out := new(SpecificationDetailReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetSpecificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/AddCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error) {
	out := new(GetCartReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) GetAdList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdReply, error) {
	out := new(AdReply)
	err := c.cc.Invoke(ctx, "/pb.GoodsService/GetAdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServiceServer is the server API for GoodsService service.
// All implementations should embed UnimplementedGoodsServiceServer
// for forward compatibility
type GoodsServiceServer interface {
	GetGoodsList(context.Context, *GoodsRequest) (*GoodsReply, error)
	GetGoodsDetail(context.Context, *GoodsRequest) (*GoodsReplyItem, error)
	GetGoodsHotList(context.Context, *GoodsRequest) (*GoodsReply, error)
	GetGoodsStatistic(context.Context, *GoodsRequest) (*GoodsStatisticReply, error)
	MakeStockUp(context.Context, *GoodsRequest) (*CommonReply, error)
	MakeStockDown(context.Context, *GoodsRequest) (*CommonReply, error)
	GetProductList(context.Context, *ProductRequest) (*ProductListReply, error)
	GetProductDetail(context.Context, *ProductRequest) (*ProductDetailReply, error)
	GetSpecificationDetail(context.Context, *SpecificationRequest) (*SpecificationDetailReply, error)
	AddCart(context.Context, *AddCartRequest) (*emptypb.Empty, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartReply, error)
	GetAdList(context.Context, *emptypb.Empty) (*AdReply, error)
}

// UnimplementedGoodsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGoodsServiceServer struct {
}

func (UnimplementedGoodsServiceServer) GetGoodsList(context.Context, *GoodsRequest) (*GoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (UnimplementedGoodsServiceServer) GetGoodsDetail(context.Context, *GoodsRequest) (*GoodsReplyItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (UnimplementedGoodsServiceServer) GetGoodsHotList(context.Context, *GoodsRequest) (*GoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsHotList not implemented")
}
func (UnimplementedGoodsServiceServer) GetGoodsStatistic(context.Context, *GoodsRequest) (*GoodsStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsStatistic not implemented")
}
func (UnimplementedGoodsServiceServer) MakeStockUp(context.Context, *GoodsRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeStockUp not implemented")
}
func (UnimplementedGoodsServiceServer) MakeStockDown(context.Context, *GoodsRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeStockDown not implemented")
}
func (UnimplementedGoodsServiceServer) GetProductList(context.Context, *ProductRequest) (*ProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedGoodsServiceServer) GetProductDetail(context.Context, *ProductRequest) (*ProductDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedGoodsServiceServer) GetSpecificationDetail(context.Context, *SpecificationRequest) (*SpecificationDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificationDetail not implemented")
}
func (UnimplementedGoodsServiceServer) AddCart(context.Context, *AddCartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedGoodsServiceServer) GetCart(context.Context, *GetCartRequest) (*GetCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedGoodsServiceServer) GetAdList(context.Context, *emptypb.Empty) (*AdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdList not implemented")
}

// UnsafeGoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServiceServer will
// result in compilation errors.
type UnsafeGoodsServiceServer interface {
	mustEmbedUnimplementedGoodsServiceServer()
}

func RegisterGoodsServiceServer(s grpc.ServiceRegistrar, srv GoodsServiceServer) {
	s.RegisterService(&GoodsService_ServiceDesc, srv)
}

func _GoodsService_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetGoodsList(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetGoodsDetail(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetGoodsHotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetGoodsHotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetGoodsHotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetGoodsHotList(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetGoodsStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetGoodsStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetGoodsStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetGoodsStatistic(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_MakeStockUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).MakeStockUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/MakeStockUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).MakeStockUp(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_MakeStockDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).MakeStockDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/MakeStockDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).MakeStockDown(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetProductList(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetProductDetail(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetSpecificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetSpecificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetSpecificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetSpecificationDetail(ctx, req.(*SpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/AddCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).AddCart(ctx, req.(*AddCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_GetAdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).GetAdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GoodsService/GetAdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).GetAdList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsService_ServiceDesc is the grpc.ServiceDesc for GoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GoodsService",
	HandlerType: (*GoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsList",
			Handler:    _GoodsService_GetGoodsList_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _GoodsService_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetGoodsHotList",
			Handler:    _GoodsService_GetGoodsHotList_Handler,
		},
		{
			MethodName: "GetGoodsStatistic",
			Handler:    _GoodsService_GetGoodsStatistic_Handler,
		},
		{
			MethodName: "MakeStockUp",
			Handler:    _GoodsService_MakeStockUp_Handler,
		},
		{
			MethodName: "MakeStockDown",
			Handler:    _GoodsService_MakeStockDown_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _GoodsService_GetProductList_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _GoodsService_GetProductDetail_Handler,
		},
		{
			MethodName: "GetSpecificationDetail",
			Handler:    _GoodsService_GetSpecificationDetail_Handler,
		},
		{
			MethodName: "AddCart",
			Handler:    _GoodsService_AddCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _GoodsService_GetCart_Handler,
		},
		{
			MethodName: "GetAdList",
			Handler:    _GoodsService_GetAdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_pb.proto",
}
