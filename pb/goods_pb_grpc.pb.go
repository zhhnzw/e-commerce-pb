// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: pb/goods_pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	GetGoodsList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error)
	GetGoodsDetail(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReplyItem, error)
	GetGoodsHotList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error)
	GetGoodsStatistic(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsStatisticReply, error)
	MakeStockUp(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error)
	MakeStockDown(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error)
	GetProductList(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListReply, error)
	GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductDetailReply, error)
	GetSpecificationDetail(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationDetailReply, error)
	AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error)
	GetAdList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdReply, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) GetGoodsList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error) {
	out := new(GoodsReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsDetail(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReplyItem, error) {
	out := new(GoodsReplyItem)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsHotList(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsReply, error) {
	out := new(GoodsReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetGoodsHotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsStatistic(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*GoodsStatisticReply, error) {
	out := new(GoodsStatisticReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetGoodsStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) MakeStockUp(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/MakeStockUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) MakeStockDown(ctx context.Context, in *GoodsRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/MakeStockDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetProductList(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductListReply, error) {
	out := new(ProductListReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetProductDetail(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductDetailReply, error) {
	out := new(ProductDetailReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetProductDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetSpecificationDetail(ctx context.Context, in *SpecificationRequest, opts ...grpc.CallOption) (*SpecificationDetailReply, error) {
	out := new(SpecificationDetailReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetSpecificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Goods/AddCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*GetCartReply, error) {
	out := new(GetCartReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetAdList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AdReply, error) {
	out := new(AdReply)
	err := c.cc.Invoke(ctx, "/pb.Goods/GetAdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations should embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	GetGoodsList(context.Context, *GoodsRequest) (*GoodsReply, error)
	GetGoodsDetail(context.Context, *GoodsRequest) (*GoodsReplyItem, error)
	GetGoodsHotList(context.Context, *GoodsRequest) (*GoodsReply, error)
	GetGoodsStatistic(context.Context, *GoodsRequest) (*GoodsStatisticReply, error)
	MakeStockUp(context.Context, *GoodsRequest) (*CommonReply, error)
	MakeStockDown(context.Context, *GoodsRequest) (*CommonReply, error)
	GetProductList(context.Context, *ProductRequest) (*ProductListReply, error)
	GetProductDetail(context.Context, *ProductRequest) (*ProductDetailReply, error)
	GetSpecificationDetail(context.Context, *SpecificationRequest) (*SpecificationDetailReply, error)
	AddCart(context.Context, *AddCartRequest) (*emptypb.Empty, error)
	GetCart(context.Context, *GetCartRequest) (*GetCartReply, error)
	GetAdList(context.Context, *emptypb.Empty) (*AdReply, error)
}

// UnimplementedGoodsServer should be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) GetGoodsList(context.Context, *GoodsRequest) (*GoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (UnimplementedGoodsServer) GetGoodsDetail(context.Context, *GoodsRequest) (*GoodsReplyItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (UnimplementedGoodsServer) GetGoodsHotList(context.Context, *GoodsRequest) (*GoodsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsHotList not implemented")
}
func (UnimplementedGoodsServer) GetGoodsStatistic(context.Context, *GoodsRequest) (*GoodsStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsStatistic not implemented")
}
func (UnimplementedGoodsServer) MakeStockUp(context.Context, *GoodsRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeStockUp not implemented")
}
func (UnimplementedGoodsServer) MakeStockDown(context.Context, *GoodsRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeStockDown not implemented")
}
func (UnimplementedGoodsServer) GetProductList(context.Context, *ProductRequest) (*ProductListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductList not implemented")
}
func (UnimplementedGoodsServer) GetProductDetail(context.Context, *ProductRequest) (*ProductDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetail not implemented")
}
func (UnimplementedGoodsServer) GetSpecificationDetail(context.Context, *SpecificationRequest) (*SpecificationDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecificationDetail not implemented")
}
func (UnimplementedGoodsServer) AddCart(context.Context, *AddCartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedGoodsServer) GetCart(context.Context, *GetCartRequest) (*GetCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedGoodsServer) GetAdList(context.Context, *emptypb.Empty) (*AdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdList not implemented")
}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsList(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsDetail(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsHotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsHotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetGoodsHotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsHotList(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetGoodsStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsStatistic(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_MakeStockUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).MakeStockUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/MakeStockUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).MakeStockUp(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_MakeStockDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).MakeStockDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/MakeStockDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).MakeStockDown(ctx, req.(*GoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetProductList(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetProductDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetProductDetail(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetSpecificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetSpecificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetSpecificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetSpecificationDetail(ctx, req.(*SpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/AddCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).AddCart(ctx, req.(*AddCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetAdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetAdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Goods/GetAdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetAdList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsList",
			Handler:    _Goods_GetGoodsList_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _Goods_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetGoodsHotList",
			Handler:    _Goods_GetGoodsHotList_Handler,
		},
		{
			MethodName: "GetGoodsStatistic",
			Handler:    _Goods_GetGoodsStatistic_Handler,
		},
		{
			MethodName: "MakeStockUp",
			Handler:    _Goods_MakeStockUp_Handler,
		},
		{
			MethodName: "MakeStockDown",
			Handler:    _Goods_MakeStockDown_Handler,
		},
		{
			MethodName: "GetProductList",
			Handler:    _Goods_GetProductList_Handler,
		},
		{
			MethodName: "GetProductDetail",
			Handler:    _Goods_GetProductDetail_Handler,
		},
		{
			MethodName: "GetSpecificationDetail",
			Handler:    _Goods_GetSpecificationDetail_Handler,
		},
		{
			MethodName: "AddCart",
			Handler:    _Goods_AddCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _Goods_GetCart_Handler,
		},
		{
			MethodName: "GetAdList",
			Handler:    _Goods_GetAdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/goods_pb.proto",
}
