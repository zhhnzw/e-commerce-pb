// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: user_pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	GetSms(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SmsReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) GetSms(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*SmsReply, error) {
	out := new(SmsReply)
	err := c.cc.Invoke(ctx, "/pb.MemberService/GetSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/pb.MemberService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations should embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	GetSms(context.Context, *LoginRequest) (*SmsReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
}

// UnimplementedMemberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) GetSms(context.Context, *LoginRequest) (*SmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSms not implemented")
}
func (UnimplementedMemberServiceServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_GetSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MemberService/GetSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetSms(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MemberService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSms",
			Handler:    _MemberService_GetSms_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MemberService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_pb.proto",
}

// SysUserServiceClient is the client API for SysUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysUserServiceClient interface {
	Register(ctx context.Context, in *SysLoginRequest, opts ...grpc.CallOption) (*SysLoginReply, error)
	Login(ctx context.Context, in *SysLoginRequest, opts ...grpc.CallOption) (*SysLoginReply, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sysUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserServiceClient(cc grpc.ClientConnInterface) SysUserServiceClient {
	return &sysUserServiceClient{cc}
}

func (c *sysUserServiceClient) Register(ctx context.Context, in *SysLoginRequest, opts ...grpc.CallOption) (*SysLoginReply, error) {
	out := new(SysLoginReply)
	err := c.cc.Invoke(ctx, "/pb.SysUserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) Login(ctx context.Context, in *SysLoginRequest, opts ...grpc.CallOption) (*SysLoginReply, error) {
	out := new(SysLoginReply)
	err := c.cc.Invoke(ctx, "/pb.SysUserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserServiceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.SysUserService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserServiceServer is the server API for SysUserService service.
// All implementations should embed UnimplementedSysUserServiceServer
// for forward compatibility
type SysUserServiceServer interface {
	Register(context.Context, *SysLoginRequest) (*SysLoginReply, error)
	Login(context.Context, *SysLoginRequest) (*SysLoginReply, error)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedSysUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSysUserServiceServer struct {
}

func (UnimplementedSysUserServiceServer) Register(context.Context, *SysLoginRequest) (*SysLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSysUserServiceServer) Login(context.Context, *SysLoginRequest) (*SysLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSysUserServiceServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}

// UnsafeSysUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserServiceServer will
// result in compilation errors.
type UnsafeSysUserServiceServer interface {
	mustEmbedUnimplementedSysUserServiceServer()
}

func RegisterSysUserServiceServer(s grpc.ServiceRegistrar, srv SysUserServiceServer) {
	s.RegisterService(&SysUserService_ServiceDesc, srv)
}

func _SysUserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SysUserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).Register(ctx, req.(*SysLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SysUserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).Login(ctx, req.(*SysLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUserService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SysUserService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServiceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUserService_ServiceDesc is the grpc.ServiceDesc for SysUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SysUserService",
	HandlerType: (*SysUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SysUserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SysUserService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SysUserService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_pb.proto",
}
